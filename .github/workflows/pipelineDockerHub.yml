name: CI/CD Pipeline with DockerHub
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
jobs:
  build:
    name: Build and Test Spring Boot App and React
    runs-on: ubuntu-latest
 
    steps:
      # Étape 1: Vérification du code source
      - name: Checkout code
        uses: actions/checkout@v3
 
      # Étape 2: Configuration de Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to mvnw
        run: chmod +x ./backend/IT_Training_back/mvnw
 
      # Étape 3: Installation des dépendances backend
      - name: Install dependencies
        working-directory: ./backend/IT_Training_back
        run: ./mvnw dependency:resolve
 
      # Étape 4: Compilation du projet
      - name: Build the project
        working-directory: ./backend/IT_Training_back
        run: ./mvnw clean install
 
      # Étape 5: Exécution des tests unitaires
      - name: Run tests
        working-directory: ./backend/IT_Training_back
        run: ./mvnw test

      # Étape 6: Installation des dépendances frontend
      - name: Install frontend dependencies
        working-directory: ./frontend/IT_Training_front
        run: npm install

      # Étape 8: Build frontend avec Vite
      - name: Build frontend
        working-directory: ./frontend/IT_Training_front
        run: npm run build
 
  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
 
    steps:
      # Étape 1: Vérification du code source
      - name: Checkout code
        uses: actions/checkout@v3
 
      # Étape 2: Connexion à DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
 
      # Étape 3: Construction de l'image Docker back
      - name: Build Docker Image Back
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/back_it_training:${{ github.sha }} ./backend/IT_Training_back
          
      # Étape 4: Push de l'image vers DockerHub
      - name: Push Docker Image Back
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/back_it_training:${{ github.sha }}

      # Étape 5: Construction de l'image Docker front
      - name: Build Docker Image Front
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/front_it_training:${{ github.sha }} ./frontend/IT_Training_front

      # Étape 6: Push de l'image vers DockerHub
      - name: Push Docker Image Front
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/front_it_training:${{ github.sha }}
 
  deploy:
    name: Deploy Application and Test Environment
    needs: docker
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Vérification du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2: Installer Docker et Docker Compose
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  

      # Étape 3: Lancer Docker Compose
      - name: Start Docker Compose
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          docker-compose -f docker-compose-hub.yml up -d --build

      # Étape 4: Tests d'intégration
      - name: Test Backend Health
        run: |
          for i in {1..10}; do
            curl --fail http://localhost:8080/api/training && break || sleep 5;
          done || exit 1

      # - name: Test frontend
      #   run: |
      #     curl --fail http://localhost || exit 1

      # # Étape 5: Arrêt des services Docker Compose
      # - name: Stop Docker Compose
      #   if: always()
      #   run: |
      #     docker-compose -f docker-compose-hub.yml down     
 
  #   steps:
  #     # Étape 1: Déploiement avec SSH (exemple vers un serveur distant)
  #     - name: Deploy to Server
  #       uses: appleboy/ssh-action@v0.1.9
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USER }}
  #         password: ${{ secrets.SERVER_PASSWORD }}
  #         port: 22
  #         script: |
  #           docker pull ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }}
  #           docker stop spring-app || true
  #           docker rm spring-app || true
  #           docker run -d --name spring-app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }}